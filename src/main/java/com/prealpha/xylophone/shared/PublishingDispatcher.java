/*
 * Copyright 2011 Meyer Kizner
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.prealpha.xylophone.shared;

import com.google.common.base.Predicate;
import com.google.common.collect.ImmutableList;

/**
 * An extension of the basic {@link Dispatcher} interface to provide for action
 * results to be shared between clients, using a publish/subscribe model.
 * Clients may subscribe to results generated by actions, regardless of the
 * client which executed the action. That client can then use the
 * {@code subscriptionId} returned to check for published actions using long
 * polling.
 * <p>
 * 
 * All methods throw {@link NullPointerException} if any parameters are
 * {@code null}.
 * 
 * @author Meyer Kizner
 * @see PublishingDispatcherAsync
 * 
 */
public interface PublishingDispatcher extends Dispatcher {
	/**
	 * Establishes a subscription to results, both partial and incomplete,
	 * resulting from certain actions. Any results arising from actions which
	 * match the predicate given will be included in the subscription.
	 * Subsequently, the returned subscription ID can be used to
	 * {@linkplain #check(long) check} to obtain the actual result objects.
	 * Alternatively, the subscription may be {@linkplain #cancel(long)
	 * cancelled} at any time. The dispatcher may not free resources associated
	 * with a subscription until it is cancelled, so it is recommended that all
	 * clients do so when the subscription is no longer necessary.
	 * 
	 * @param predicate
	 *            a predicate matching actions to which a subscription is
	 *            desired
	 * @return a subscription ID, representing a subscription to all results
	 *         arising from actions matching {@code predicate}
	 */
	long subscribe(Predicate<? super Action<?>> predicate);

	/**
	 * Checks a subscription for any results which may have been published since
	 * the last check. The results will be returned as a list, in the order in
	 * which they were created. If there are no published results pending, this
	 * method will block until a result is published. Therefore, an empty list
	 * will only be returned if the subscription is cancelled while the method
	 * is waiting.
	 * <p>
	 * 
	 * There is no way to obtain the exact action object which generated any
	 * particular result. The client is only guaranteed that the action
	 * fulfilled the predicate specified when the subscription was created.
	 * Clients are advised to create multiple subscriptions, each with a
	 * restrictive predicate, if this information is required.
	 * 
	 * @param subscriptionId
	 *            the subscription ID to check
	 * @return a list of results, in chronological order, which have been
	 *         published since the last time the subscription was checked
	 */
	ImmutableList<Result> check(long subscriptionId);

	/**
	 * Cancels a subscription, freeing any resources associated with it. Any
	 * results which have been published since the last check are discarded.
	 * 
	 * @param subscriptionId
	 *            the subscription ID to cancel
	 */
	void cancel(long subscriptionId);
}
